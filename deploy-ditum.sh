#!/bin/bash

# ===== DITUM.KZ DEPLOYMENT SCRIPT =====
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Career Development

echo "üè¢ ===== DITUM.KZ DEPLOYMENT SCRIPT ====="
echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Career Development Testing Platform"
echo "üìÖ $(date '+%Y-%m-%d %H:%M:%S')"
echo "=================================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date '+%H:%M:%S')] ‚úÖ $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date '+%H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}[$(date '+%H:%M:%S')] ‚ùå $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')] ‚ÑπÔ∏è  $1${NC}"
}

success() {
    echo -e "${PURPLE}[$(date '+%H:%M:%S')] üéâ $1${NC}"
}

step() {
    echo -e "${CYAN}[$(date '+%H:%M:%S')] üëâ $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
check_status() {
    if [ $? -eq 0 ]; then
        log "$1 - —É—Å–ø–µ—à–Ω–æ"
    else
        error "$1 - –æ—à–∏–±–∫–∞"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
step "–≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
    echo "–ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh"
    exit 1
fi
log "Docker –Ω–∞–π–¥–µ–Ω: $(docker --version)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    echo "–ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:"
    echo 'curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose'
    echo 'chmod +x /usr/local/bin/docker-compose'
    exit 1
fi
log "Docker Compose –Ω–∞–π–¥–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [ "$EUID" -ne 0 ]; then
    warn "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–µ –æ—Ç root. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å sudo."
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
available_space=$(df / | awk 'NR==2 {print $4}')
if [ "$available_space" -lt 2000000 ]; then
    warn "–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (< 2GB). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ."
fi
log "–°–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: $(($available_space / 1024 / 1024))GB"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
step "–≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"

required_files=(
    "docker-compose.yml"
    "init.sql"
    "backend/Dockerfile"
    "backend/package.json"
    "backend/app.js"
    "backend/.env"
    "frontend/Dockerfile"
    "frontend/package.json"
    "frontend/nginx.conf"
)

missing_files=()
for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        missing_files+=("$file")
    fi
done

if [ ${#missing_files[@]} -ne 0 ]; then
    error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:"
    for file in "${missing_files[@]}"; do
        echo "  ‚ùå $file"
    done
    exit 1
fi
log "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
step "–≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ backend/.env
if [ -f "backend/.env" ]; then
    if grep -q "ditum.kz" backend/.env; then
        log "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è ditum.kz"
    else
        warn "–§–∞–π–ª .env –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è ditum.kz"
    fi

    if grep -q "CHANGE_ME" backend/.env; then
        warn "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ .env —Ñ–∞–π–ª–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å."
    fi
else
    error "–§–∞–π–ª backend/.env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
step "–≠–¢–ê–ü 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"

log "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p logs ssl backup temp
chmod 755 logs ssl backup temp

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –¥–ª—è docker-compose –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -f ".env" ]; then
    log "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –¥–ª—è docker-compose..."
    cat > .env << 'EOF'
# Docker Compose Environment
POSTGRES_DB=motivation_testing
POSTGRES_USER=motivation_user
POSTGRES_PASSWORD=DitumSecure2024!
DOMAIN_NAME=ditum.kz
EOF
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
step "–≠–¢–ê–ü 5: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"

log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose down --remove-orphans 2>/dev/null || true
check_status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"

# –û—á–∏—Å—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
echo ""
read -p "üóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã –∏ volumes –¥–ª—è —á–∏—Å—Ç–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏? (y/N): " -n 1 -r
echo ""
if [[ $REPLY =~ ^[Yy]$ ]]; then
    warn "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞..."
    docker-compose down --rmi all --volumes 2>/dev/null || true
    docker system prune -f
    log "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
fi

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
step "–≠–¢–ê–ü 6: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"

log "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è ditum.kz..."
echo "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."

# –°–±–æ—Ä–∫–∞ —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–∞
docker-compose build --no-cache --parallel
check_status "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤"

success "–û–±—Ä–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã!"

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
step "–≠–¢–ê–ü 7: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"

log "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose up -d
check_status "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
step "–≠–¢–ê–ü 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"

log "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 20

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
check_service_health() {
    local service_name=$1
    local url=$2
    local max_attempts=15
    local attempt=1

    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ $service_name..."

    while [ $attempt -le $max_attempts ]; do
        if curl -f -s "$url" > /dev/null 2>&1; then
            log "$service_name –≥–æ—Ç–æ–≤ ‚úÖ"
            return 0
        else
            info "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts: $service_name –Ω–µ –≥–æ—Ç–æ–≤..."
            sleep 5
            ((attempt++))
        fi
    done

    warn "$service_name –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
    return 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."

# PostgreSQL
if docker-compose exec -T postgres pg_isready -U motivation_user -d motivation_testing > /dev/null 2>&1; then
    log "PostgreSQL –≥–æ—Ç–æ–≤ ‚úÖ"
else
    warn "PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# Backend API
check_service_health "Backend API" "http://localhost:5000/health"

# Frontend
check_service_health "Frontend" "http://localhost:3000"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
step "–≠–¢–ê–ü 9: –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"

log "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker-compose ps

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏..."
if docker-compose logs backend 2>/dev/null | grep -i "error\|failed\|exception" | head -3; then
    warn "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö backend (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)"
fi

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
step "–≠–¢–ê–ü 10: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"

# –¢–µ—Å—Ç API
log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."
api_response=$(curl -s -w "%{http_code}" http://localhost:5000/health -o /dev/null)
if [ "$api_response" = "200" ]; then
    log "API —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω ‚úÖ"
else
    warn "API —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª (–∫–æ–¥: $api_response)"
fi

# –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
if docker-compose exec -T postgres psql -U motivation_user -d motivation_testing -c "SELECT COUNT(*) FROM users;" > /dev/null 2>&1; then
    log "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ"
else
    warn "–ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
fi

# –¢–µ—Å—Ç email —Å–µ—Ä–≤–∏—Å–∞
log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email —Å–µ—Ä–≤–∏—Å–∞..."
docker-compose exec -T backend node -e "
const emailService = require('./services/emailService');
emailService.testConnection().then(() => {
    console.log('‚úÖ Email —Å–µ—Ä–≤–∏—Å ditum.kz —Ä–∞–±–æ—Ç–∞–µ—Ç');
    process.exit(0);
}).catch((err) => {
    console.log('‚ö†Ô∏è Email —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', err.message);
    process.exit(1);
});
" 2>/dev/null && log "Email —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ ‚úÖ" || warn "Email —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
step "–†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"

echo ""
echo "üéâ ===== DITUM.KZ –£–°–ü–ï–®–ù–û –†–ê–ó–í–ï–†–ù–£–¢! ====="
echo ""
echo -e "${BLUE}üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏:${NC}"
echo "  üåê Frontend:     http://$(hostname -I | awk '{print $1}'):3000"
echo "  üîß Backend API:  http://$(hostname -I | awk '{print $1}'):5000"
echo "  üíæ PostgreSQL:   $(hostname -I | awk '{print $1}'):5432"
echo "  üìß Email:        ditum.kz SMTP"
echo ""
echo -e "${PURPLE}üë• –î–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç—ã (–ø–∞—Ä–æ–ª—å: Demo123!):${NC}"
echo "  üîë admin@ditum.kz   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
echo "  üë®‚Äçüíº coach@ditum.kz    - –ö–æ—É—á"
echo "  üÜò support@ditum.kz - –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
echo ""
echo -e "${CYAN}üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo "  üìä –°—Ç–∞—Ç—É—Å:          docker-compose ps"
echo "  üìú –õ–æ–≥–∏:            docker-compose logs -f [service]"
echo "  üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:      docker-compose restart [service]"
echo "  ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞:       docker-compose down"
echo "  üóÑÔ∏è –ë–î –∫–æ–Ω—Å–æ–ª—å:      docker-compose exec postgres psql -U motivation_user -d motivation_testing"
echo "  üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:      docker stats"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:${NC}"
echo "  1. üîê –ò–∑–º–µ–Ω–∏—Ç–µ JWT_SECRET –≤ backend/.env"
echo "  2. üîë –û–±–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
echo "  3. üåê –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS: ditum.kz ‚Üí $(hostname -I | awk '{print $1}')"
echo "  4. üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã (certbot)"
echo "  5. üìß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP ditum.kz"
echo "  6. üìã –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
echo "  7. üî• –ù–∞—Å—Ç—Ä–æ–π—Ç–µ firewall (ufw/iptables)"
echo ""
echo -e "${GREEN}‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ ditum.kz!${NC}"
echo ""
echo "üîó –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ: http://$(hostname -I | awk '{print $1}'):3000"
echo "üìß –ü–æ–¥–¥–µ—Ä–∂–∫–∞: support@ditum.kz"
echo ""
echo "===== –ó–ê–í–ï–†–®–ï–ù–û $(date '+%Y-%m-%d %H:%M:%S') ====="