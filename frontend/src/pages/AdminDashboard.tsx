// frontend/src/pages/AdminDashboard.tsx
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { useAdminAuth } from '@/hooks/useAdminAuth';
import {
    Settings, Users, FileText, Edit, Trash2, Plus, Lock, Unlock,
    BarChart3, Target, UserCheck, AlertCircle, Check, X, RefreshCw, LogOut
} from 'lucide-react';

// Interfaces
interface Stats {
    totalTests: number;
    completedTests: number;
    activeTests: number;
    totalCoaches: number;
    totalUsers: number;
    avgCompletionTime: number;
}

interface Coach {
    id: number;
    email: string;
    firstName: string;
    lastName: string;
    status: 'active' | 'pending' | 'inactive';
    createdAt: string;
    testsCreated: number;
}

interface Question {
    id: number;
    text: string;
    group: string;
    category: 'behavior' | 'motivation' | 'control';
    language: 'ru' | 'en';
}

interface NewCoach {
    email: string;
    firstName: string;
    lastName: string;
    password: string;
    confirmPassword: string;
}

interface EditingQuestion {
    id: number | null;
    text: string;
    group: string;
    category: 'behavior' | 'motivation' | 'control';
    language: 'ru' | 'en';
}

const AdminDashboard: React.FC = () => {
    const { user, logout } = useAdminAuth();
    const [activeTab, setActiveTab] = useState<string>('overview');
    const [selectedLanguage, setSelectedLanguage] = useState<'ru' | 'en'>('ru');
    const [showCreateCoachDialog, setShowCreateCoachDialog] = useState<boolean>(false);
    const [showEditQuestionDialog, setShowEditQuestionDialog] = useState<boolean>(false);
    const [searchTerm, setSearchTerm] = useState<string>('');
    const [statusFilter, setStatusFilter] = useState<string>('all');
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);

    // State –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å API
    const [stats, setStats] = useState<Stats>({
        totalTests: 0,
        completedTests: 0,
        activeTests: 0,
        totalCoaches: 0,
        totalUsers: 0,
        avgCompletionTime: 0
    });

    const [coaches, setCoaches] = useState<Coach[]>([]);
    const [questions, setQuestions] = useState<Question[]>([]);

    const [newCoach, setNewCoach] = useState<NewCoach>({
        email: '',
        firstName: '',
        lastName: '',
        password: '',
        confirmPassword: ''
    });

    const [editingQuestion, setEditingQuestion] = useState<EditingQuestion>({
        id: null,
        text: '',
        group: '',
        category: 'behavior',
        language: 'ru'
    });

    // API —Ñ—É–Ω–∫—Ü–∏–∏
    const fetchStats = async () => {
        try {
            console.log('üîÑ Fetching admin stats...');
            const token = localStorage.getItem('adminToken');
            const response = await fetch('/api/admin/stats', {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`Stats API error: ${response.status}`);
            }

            const data = await response.json();
            console.log('‚úÖ Stats received:', data);

            setStats({
                totalTests: data.stats?.total_tests || 0,
                completedTests: data.stats?.completed_sessions || 0,
                activeTests: (data.stats?.total_tests || 0) - (data.stats?.completed_sessions || 0),
                totalCoaches: data.stats?.total_coaches || 0,
                totalUsers: data.stats?.total_participants || 0,
                avgCompletionTime: data.stats?.avg_completion_time || 0
            });
        } catch (error) {
            console.error('‚ùå Error fetching stats:', error);
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    };

    const fetchCoaches = async () => {
        try {
            console.log('üîÑ Fetching coaches...');
            const token = localStorage.getItem('adminToken');
            const response = await fetch('/api/admin/coaches', {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`Coaches API error: ${response.status}`);
            }

            const data = await response.json();
            console.log('‚úÖ Coaches received:', data);

            const mappedCoaches = data.map((coach: any) => ({
                id: coach.id,
                email: coach.email,
                firstName: coach.first_name,
                lastName: coach.last_name,
                status: coach.status,
                createdAt: coach.created_at,
                testsCreated: coach.tests_created || 0
            }));

            setCoaches(mappedCoaches);
        } catch (error) {
            console.error('‚ùå Error fetching coaches:', error);
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—É—á–µ–π');
        }
    };

    const fetchQuestions = async () => {
        try {
            console.log('üîÑ Fetching questions...');
            const token = localStorage.getItem('adminToken');
            const response = await fetch(`/api/admin/questions?language=${selectedLanguage}`, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`Questions API error: ${response.status}`);
            }

            const data = await response.json();
            console.log('‚úÖ Questions received:', data);

            const mappedQuestions = data.map((q: any) => ({
                id: q.id,
                text: q.question_text,
                group: q.motivational_group,
                category: q.category,
                language: q.language
            }));

            setQuestions(mappedQuestions);
        } catch (error) {
            console.error('‚ùå Error fetching questions:', error);
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤');
        }
    };

    const createCoach = async () => {
        try {
            if (!newCoach.email || !newCoach.firstName || !newCoach.lastName || !newCoach.password) {
                setError('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
                return;
            }

        if (newCoach.password !== newCoach.confirmPassword) {
                setError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
            return;
        }

            console.log('üîÑ Creating coach...');
            const token = localStorage.getItem('adminToken');
            const response = await fetch('/api/admin/coaches', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                email: newCoach.email,
                firstName: newCoach.firstName,
                lastName: newCoach.lastName,
                    password: newCoach.password
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—É—á–∞');
            }

            const data = await response.json();
            console.log('‚úÖ Coach created:', data);

            setNewCoach({
                email: '',
                firstName: '',
                lastName: '',
                password: '',
                confirmPassword: ''
            });
            setShowCreateCoachDialog(false);
            setError(null);

            await fetchCoaches();

        } catch (error) {
            console.error('‚ùå Error creating coach:', error);
            setError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—É—á–∞');
        }
    };

    const handleCreateQuestion = async () => {
        try {
            if (!editingQuestion.text || !editingQuestion.group) {
                setError('–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≥—Ä—É–ø–ø–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
                return;
            }

            console.log('üîÑ Creating/updating question...');
            const token = localStorage.getItem('adminToken');
            const response = await fetch('/api/admin/questions', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    id: editingQuestion.id,
                    text: editingQuestion.text,
                    group: editingQuestion.group,
                    category: editingQuestion.category,
                    language: editingQuestion.language
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞');
            }

            const data = await response.json();
            console.log('‚úÖ Question saved:', data);

        setEditingQuestion({
                id: null,
                text: '',
                group: '',
                category: 'behavior',
                language: 'ru'
            });
            setShowEditQuestionDialog(false);
            setError(null);

            await fetchQuestions();

        } catch (error) {
            console.error('‚ùå Error saving question:', error);
            setError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞');
        }
    };

    const handleDeleteQuestion = async (questionId: number) => {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?')) {
            return;
        }

        try {
            console.log('üîÑ Deleting question...');
            const token = localStorage.getItem('adminToken');
            const response = await fetch(`/api/admin/questions/${questionId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞');
            }

            console.log('‚úÖ Question deleted');
            await fetchQuestions();

        } catch (error) {
            console.error('‚ùå Error deleting question:', error);
            setError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞');
        }
    };

    const updateCoachStatus = async (coachId: number, newStatus: string) => {
        try {
            console.log('üîÑ Updating coach status...');
            const token = localStorage.getItem('adminToken');
            const response = await fetch(`/api/admin/coaches/${coachId}/status`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: newStatus })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
            }

            console.log('‚úÖ Coach status updated');
            await fetchCoaches();

        } catch (error) {
            console.error('‚ùå Error updating coach status:', error);
            setError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        const loadData = async () => {
            setLoading(true);
            setError(null);

            try {
                await Promise.all([
                    fetchStats(),
                    fetchCoaches(),
                    fetchQuestions()
                ]);
            } catch (error) {
                console.error('‚ùå Error loading admin data:', error);
                setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∫–∏');
            } finally {
                setLoading(false);
            }
        };

        if (user) {
            loadData();
        }
    }, [user]);

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    useEffect(() => {
        if (user && !loading) {
            fetchQuestions();
        }
    }, [selectedLanguage]);

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const refreshData = async () => {
        setLoading(true);
        setError(null);
        await Promise.all([fetchStats(), fetchCoaches(), fetchQuestions()]);
        setLoading(false);
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ—É—á–µ–π
    const filteredCoaches = coaches.filter(coach => {
        const matchesSearch =
            coach.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||
            coach.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||
            coach.email.toLowerCase().includes(searchTerm.toLowerCase());

        const matchesStatus = statusFilter === 'all' || coach.status === statusFilter;

        return matchesSearch && matchesStatus;
    });

    // –ì—Ä—É–ø–ø—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
    const motivationalGroups = [
        'Perfectionism', 'Reaching Goals', 'Social Contact', 'Being Logical',
        'Bringing Happiness', 'Intuition', 'Success', 'Recognition',
        'Professional Pleasure', 'Resilience', 'Social Approval', 'Team Spirit',
        'Intellectual Discovery', 'Empathy', 'Influence', 'Respect', 'Value', 'Efficiency'
    ];

    if (loading) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center">
                    <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-4 text-blue-600" />
                    <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50">
            {/* Header */}
            <div className="bg-white shadow-sm border-b">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <div className="flex justify-between items-center h-16">
                        <div className="flex items-center space-x-3">
                            <Settings className="h-8 w-8 text-blue-600" />
                            <div>
                                <h1 className="text-xl font-bold text-gray-900">–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å</h1>
                                <p className="text-sm text-gray-600">
                                    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user?.firstName} {user?.lastName}
                                </p>
                            </div>
                        </div>
                        <div className="flex items-center space-x-3">
                            <Button onClick={refreshData} variant="outline" size="sm" disabled={loading}>
                                <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
                                –û–±–Ω–æ–≤–∏—Ç—å
                            </Button>
                            <Button onClick={logout} variant="outline" size="sm">
                                <LogOut className="h-4 w-4 mr-2" />
                                –í—ã–π—Ç–∏
                            </Button>
                        </div>
                    </div>
                </div>
            </div>

            {/* Error Message */}
            {error && (
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-4">
                    <div className="bg-red-50 border border-red-200 rounded-md p-4">
                        <div className="flex">
                            <AlertCircle className="h-5 w-5 text-red-400" />
                            <div className="ml-3">
                                <p className="text-sm text-red-700">{error}</p>
                            </div>
                            <button
                                onClick={() => setError(null)}
                                className="ml-auto text-red-400 hover:text-red-600"
                            >
                                <X className="h-4 w-4" />
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Main Content */}
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                <Tabs value={activeTab} onValueChange={setActiveTab}>
                    <TabsList className="grid w-full grid-cols-4">
                        <TabsTrigger value="overview">
                            <BarChart3 className="h-4 w-4 mr-2" />
                            –î–∞—à–±–æ—Ä–¥
                        </TabsTrigger>
                        <TabsTrigger value="coaches">
                            <Users className="h-4 w-4 mr-2" />
                            –ö–æ—É—á–∏ ({coaches.length})
                        </TabsTrigger>
                        <TabsTrigger value="questions">
                            <FileText className="h-4 w-4 mr-2" />
                            –í–æ–ø—Ä–æ—Å—ã ({questions.length})
                        </TabsTrigger>
                        <TabsTrigger value="settings">
                            <Settings className="h-4 w-4 mr-2" />
                            –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                        </TabsTrigger>
                    </TabsList>

                    {/* –î–∞—à–±–æ—Ä–¥ */}
                    <TabsContent value="overview" className="space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                            <Card>
                                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                    <CardTitle className="text-sm font-medium">–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤</CardTitle>
                                    <FileText className="h-4 w-4 text-muted-foreground" />
                                </CardHeader>
                                <CardContent>
                                    <div className="text-2xl font-bold">{stats.totalTests}</div>
                                    <p className="text-xs text-muted-foreground">
                                        –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats.completedTests}
                                    </p>
                                </CardContent>
                            </Card>

                            <Card>
                                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                    <CardTitle className="text-sm font-medium">–ö–æ—É—á–∏</CardTitle>
                                    <Users className="h-4 w-4 text-muted-foreground" />
                                </CardHeader>
                                <CardContent>
                                    <div className="text-2xl font-bold">{stats.totalCoaches}</div>
                                    <p className="text-xs text-muted-foreground">
                                        –ê–∫—Ç–∏–≤–Ω—ã—Ö: {coaches.filter(c => c.status === 'active').length}
                                    </p>
                                </CardContent>
                            </Card>

                            <Card>
                                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                    <CardTitle className="text-sm font-medium">–£—á–∞—Å—Ç–Ω–∏–∫–∏</CardTitle>
                                    <UserCheck className="h-4 w-4 text-muted-foreground" />
                                </CardHeader>
                                <CardContent>
                                    <div className="text-2xl font-bold">{stats.totalUsers}</div>
                                    <p className="text-xs text-muted-foreground">
                                        –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                                    </p>
                                </CardContent>
                            </Card>

                        <Card>
                                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                    <CardTitle className="text-sm font-medium">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</CardTitle>
                                    <Target className="h-4 w-4 text-muted-foreground" />
                            </CardHeader>
                            <CardContent>
                                    <div className="text-2xl font-bold">
                                        {Math.round(stats.avgCompletionTime)} –º–∏–Ω
                                </div>
                                    <p className="text-xs text-muted-foreground">
                                        –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
                                    </p>
                            </CardContent>
                        </Card>
                        </div>
                    </TabsContent>

                    {/* –ö–æ—É—á–∏ */}
                    <TabsContent value="coaches" className="space-y-6">
                        <div className="flex justify-between items-center">
                            <h2 className="text-2xl font-bold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—É—á–∞–º–∏</h2>
                            <Button onClick={() => setShowCreateCoachDialog(true)}>
                                <Plus className="h-4 w-4 mr-2" />
                                –°–æ–∑–¥–∞—Ç—å –∫–æ—É—á–∞
                            </Button>
                        </div>

                        {/* –§–∏–ª—å—Ç—Ä—ã */}
                        <div className="flex flex-col sm:flex-row gap-4">
                            <div className="flex-1">
                                <Input
                                    placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    className="w-full"
                                />
                            </div>
                            <Select value={statusFilter} onValueChange={setStatusFilter}>
                                <SelectTrigger className="w-48">
                                    <SelectValue placeholder="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</SelectItem>
                                    <SelectItem value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</SelectItem>
                                    <SelectItem value="pending">–û–∂–∏–¥–∞—é—Ç</SelectItem>
                                    <SelectItem value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>

                        <Card>
                            <CardContent className="p-6">
                        <div className="space-y-4">
                                    {filteredCoaches.length === 0 ? (
                                        <div className="text-center py-8">
                                            <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                                            <p className="text-gray-500">
                                                {coaches.length === 0 ? '–ö–æ—É—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç –∫–æ—É—á–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º'}
                                            </p>
                                        </div>
                                    ) : (
                                        filteredCoaches.map((coach) => (
                                            <div key={coach.id} className="flex items-center justify-between p-4 border rounded-lg">
                                            <div className="flex-1">
                                                    <h3 className="font-medium">{coach.firstName} {coach.lastName}</h3>
                                                        <p className="text-sm text-gray-500">{coach.email}</p>
                                                    <p className="text-xs text-gray-400">
                                                        –°–æ–∑–¥–∞–Ω: {new Date(coach.createdAt).toLocaleDateString()}
                                                        ‚Ä¢ –¢–µ—Å—Ç–æ–≤: {coach.testsCreated}
                                                    </p>
                                                    </div>
                                                <div className="flex items-center space-x-2">
                                                    <Badge
                                                        variant={
                                                            coach.status === 'active' ? 'default' :
                                                                coach.status === 'pending' ? 'secondary' : 'destructive'
                                                        }
                                                    >
                                                        {coach.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' :
                                                            coach.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                                                    </Badge>
                                                <Button
                                                    variant="outline"
                                                    size="sm"
                                                        onClick={() => updateCoachStatus(coach.id, coach.status === 'active' ? 'inactive' : 'active')}
                                                >
                                                        {coach.status === 'active' ? (
                                                            <Lock className="h-4 w-4" />
                                                        ) : (
                                                        <Unlock className="h-4 w-4" />
                                                        )}
                                                </Button>
                                            </div>
                                            </div>
                                        ))
                                    )}
                                        </div>
                                    </CardContent>
                                </Card>
                    </TabsContent>

                    {/* –í–æ–ø—Ä–æ—Å—ã */}
                    <TabsContent value="questions" className="space-y-6">
                        <div className="flex justify-between items-center">
                            <div className="flex items-center space-x-4">
                                <h2 className="text-2xl font-bold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏</h2>
                                <Select value={selectedLanguage} onValueChange={(value: 'ru' | 'en') => setSelectedLanguage(value)}>
                                    <SelectTrigger className="w-32">
                                        <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="ru">–†—É—Å—Å–∫–∏–π</SelectItem>
                                        <SelectItem value="en">English</SelectItem>
                                    </SelectContent>
                                </Select>
                            </div>
                            <Button onClick={() => {
                                setEditingQuestion({
                                    id: null,
                                    text: '',
                                    group: '',
                                    category: 'behavior',
                                    language: selectedLanguage
                                });
                                setShowEditQuestionDialog(true);
                            }}>
                                <Plus className="h-4 w-4 mr-2" />
                                –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
                            </Button>
                        </div>

                        <Card>
                            <CardContent className="p-6">
                        <div className="space-y-4">
                                    {questions.length === 0 ? (
                                        <div className="text-center py-8">
                                            <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                                            <p className="text-gray-500">–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                                        </div>
                                    ) : (
                                        questions.map((question) => (
                                            <div key={question.id} className="p-4 border rounded-lg">
                                                <div className="flex justify-between items-start">
                                            <div className="flex-1">
                                                        <p className="font-medium">{question.text}</p>
                                                        <div className="flex items-center space-x-2 mt-2">
                                                            <Badge variant="outline">{question.group}</Badge>
                                                            <Badge variant="secondary">{question.category}</Badge>
                                                            <Badge variant="outline">{question.language}</Badge>
                                                    </div>
                                            </div>
                                            <div className="flex space-x-2">
                                                        <Button
                                                            variant="outline"
                                                            size="sm"
                                                            onClick={() => {
                                                                setEditingQuestion({
                                                                    id: question.id,
                                                                    text: question.text,
                                                                    group: question.group,
                                                                    category: question.category,
                                                                    language: question.language
                                                                });
                                                                setShowEditQuestionDialog(true);
                                                            }}
                                                        >
                                                            <Edit className="h-4 w-4" />
                                                </Button>
                                                        <Button
                                                            variant="outline"
                                                            size="sm"
                                                            onClick={() => handleDeleteQuestion(question.id)}
                                                        >
                                                            <Trash2 className="h-4 w-4" />
                                                </Button>
                                            </div>
                                                </div>
                                            </div>
                                        ))
                                    )}
                                        </div>
                                    </CardContent>
                                </Card>
                    </TabsContent>

                    {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                    <TabsContent value="settings" className="space-y-6">
                        <h2 className="text-2xl font-bold">–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
                            <Card>
                            <CardContent className="p-6">
                                <div className="space-y-4">
                                    <div className="flex justify-between items-center">
                                        <span>–í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã:</span>
                                        <span>1.0.0</span>
                                    </div>
                                    <div className="flex justify-between items-center">
                                        <span>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</span>
                                        <span className="text-green-600">–ü–æ–¥–∫–ª—é—á–µ–Ω–∞</span>
                                    </div>
                                    <div className="flex justify-between items-center">
                                        <span>Email —Å–µ—Ä–≤–∏—Å:</span>
                                        <span className="text-green-600">–ê–∫—Ç–∏–≤–µ–Ω</span>
                                    </div>
                                    <div className="flex justify-between items-center">
                                        <span>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</span>
                                        <span>{new Date().toLocaleString()}</span>
                                    </div>
                                    </div>
                                </CardContent>
                            </Card>
                    </TabsContent>
                </Tabs>
            </div>

            {/* Dialog –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—É—á–∞ */}
            <Dialog open={showCreateCoachDialog} onOpenChange={setShowCreateCoachDialog}>
                <DialogContent className="sm:max-w-[500px]">
                    <DialogHeader>
                        <DialogTitle>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—É—á–∞</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                        <div className="space-y-2">
                            <Label htmlFor="coach-email">Email *</Label>
                            <Input
                                id="coach-email"
                                type="email"
                                value={newCoach.email}
                                onChange={(e) => setNewCoach({...newCoach, email: e.target.value})}
                                placeholder="coach@example.com"
                            />
                        </div>
                        <div className="grid grid-cols-2 gap-4">
                            <div className="space-y-2">
                                <Label htmlFor="coach-firstName">–ò–º—è *</Label>
                                <Input
                                    id="coach-firstName"
                                    value={newCoach.firstName}
                                    onChange={(e) => setNewCoach({...newCoach, firstName: e.target.value})}
                                    placeholder="–ò–º—è"
                                />
                            </div>
                            <div className="space-y-2">
                                <Label htmlFor="coach-lastName">–§–∞–º–∏–ª–∏—è *</Label>
                                <Input
                                    id="coach-lastName"
                                    value={newCoach.lastName}
                                    onChange={(e) => setNewCoach({...newCoach, lastName: e.target.value})}
                                    placeholder="–§–∞–º–∏–ª–∏—è"
                                />
                            </div>
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="coach-password">–ü–∞—Ä–æ–ª—å *</Label>
                            <Input
                                id="coach-password"
                                type="password"
                                value={newCoach.password}
                                onChange={(e) => setNewCoach({...newCoach, password: e.target.value})}
                                placeholder="–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"
                            />
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="coach-confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å *</Label>
                            <Input
                                id="coach-confirmPassword"
                                type="password"
                                value={newCoach.confirmPassword}
                                onChange={(e) => setNewCoach({...newCoach, confirmPassword: e.target.value})}
                                placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                            />
                        </div>
                        <div className="flex space-x-2">
                            <Button
                                onClick={createCoach}
                                disabled={!newCoach.email || !newCoach.firstName || !newCoach.lastName || !newCoach.password}
                            >
                                –°–æ–∑–¥–∞—Ç—å –∫–æ—É—á–∞
                            </Button>
                            <Button variant="outline" onClick={() => setShowCreateCoachDialog(false)}>
                                –û—Ç–º–µ–Ω–∞
                            </Button>
                        </div>
                    </div>
                </DialogContent>
            </Dialog>

            {/* Dialog –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ */}
            <Dialog open={showEditQuestionDialog} onOpenChange={setShowEditQuestionDialog}>
                <DialogContent className="sm:max-w-[600px]">
                    <DialogHeader>
                        <DialogTitle>
                            {editingQuestion.id ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å' : '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å'}
                        </DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                        <div className="space-y-2">
                            <Label htmlFor="question-text">–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ *</Label>
                            <Textarea
                                id="question-text"
                                value={editingQuestion.text}
                                onChange={(e) => setEditingQuestion({...editingQuestion, text: e.target.value})}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞..."
                                rows={3}
                            />
                        </div>
                        <div className="grid grid-cols-2 gap-4">
                        <div className="space-y-2">
                                <Label htmlFor="question-group">–ì—Ä—É–ø–ø–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ *</Label>
                            <Select
                                value={editingQuestion.group}
                                    onValueChange={(value) => setEditingQuestion({...editingQuestion, group: value})}
                            >
                                <SelectTrigger>
                                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É" />
                                </SelectTrigger>
                                <SelectContent>
                                    {motivationalGroups.map(group => (
                                        <SelectItem key={group} value={group}>{group}</SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>
                            <div className="space-y-2">
                                <Label htmlFor="question-category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
                                <Select
                                    value={editingQuestion.category}
                                    onValueChange={(value: 'behavior' | 'motivation' | 'control') =>
                                        setEditingQuestion({...editingQuestion, category: value})}
                                >
                                    <SelectTrigger>
                                        <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="behavior">–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π</SelectItem>
                                        <SelectItem value="motivation">–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π</SelectItem>
                                        <SelectItem value="control">–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π</SelectItem>
                                    </SelectContent>
                                </Select>
                            </div>
                            </div>
                            <div className="space-y-2">
                                <Label htmlFor="question-language">–Ø–∑—ã–∫</Label>
                                <Select
                                    value={editingQuestion.language}
                                    onValueChange={(value: 'ru' | 'en') =>
                                    setEditingQuestion({...editingQuestion, language: value})}
                                >
                                <SelectTrigger className="w-32">
                                    <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="ru">–†—É—Å—Å–∫–∏–π</SelectItem>
                                        <SelectItem value="en">English</SelectItem>
                                    </SelectContent>
                                </Select>
                        </div>
                        <div className="flex space-x-2">
                            <Button
                                onClick={handleCreateQuestion}
                                disabled={!editingQuestion.text || !editingQuestion.group}
                            >
                                {editingQuestion.id ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å'}
                            </Button>
                            <Button variant="outline" onClick={() => setShowEditQuestionDialog(false)}>
                                –û—Ç–º–µ–Ω–∞
                            </Button>
                        </div>
                    </div>
                </DialogContent>
            </Dialog>
        </div>
    );
};

export default AdminDashboard;