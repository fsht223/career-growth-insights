// –ó–∞–º–µ–Ω–∏—Ç–µ –ü–û–õ–ù–û–°–¢–¨–Æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ backend/routes/admin.js
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { Pool } = require('pg');
const router = express.Router();

console.log('üîÑ Admin routes file loaded');

// Database connection
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// Test route - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ /api/admin/test
router.get('/test', (req, res) => {
    console.log('‚úÖ Admin test route called');
    res.json({
        message: 'Admin routes are working!',
        timestamp: new Date().toISOString()
    });
});

// Login route - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ /api/admin/login
router.post('/login', async (req, res) => {
    console.log('üîê Admin direct login attempt:', req.body);

    try {
        const { email, password } = req.body;

        if (!email || !password) {
            return res.status(400).json({ error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        console.log('üîç Looking for admin with email:', email);

        const query = `
            SELECT id, email, password_hash, first_name, last_name, role, status
            FROM users
            WHERE email = $1 AND role = 'admin'
        `;

        const result = await pool.query(query, [email]);
        console.log('üë§ Users found:', result.rows.length);

        if (result.rows.length === 0) {
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        const admin = result.rows[0];
        console.log('üëë Admin found:', admin.email, 'Status:', admin.status);

        if (admin.status !== 'active') {
            return res.status(401).json({ error: '–ê–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' });
        }

        const isValidPassword = await bcrypt.compare(password, admin.password_hash);
        console.log('üîë Password valid:', isValidPassword);

        if (!isValidPassword) {
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        const token = jwt.sign(
            {
                id: admin.id,
                email: admin.email,
                role: admin.role
            },
            process.env.JWT_SECRET,
            { expiresIn: '24h' }
        );

        console.log('‚úÖ Login successful for:', admin.email);

        res.json({
            token,
            user: {
                id: admin.id,
                email: admin.email,
                firstName: admin.first_name,
                lastName: admin.last_name,
                role: admin.role
            }
        });

    } catch (error) {
        console.error('‚ùå Admin login error:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' });
    }
});

// Auth login route –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
router.post('/auth/login', async (req, res) => {
    console.log('üîê Admin auth/login attempt:', req.body);

    try {
        const { email, password } = req.body;

        if (!email || !password) {
            return res.status(400).json({ error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        console.log('üîç Looking for admin with email:', email);

        const query = `
            SELECT id, email, password_hash, first_name, last_name, role, status
            FROM users
            WHERE email = $1 AND role = 'admin'
        `;

        const result = await pool.query(query, [email]);
        console.log('üë§ Users found:', result.rows.length);

        if (result.rows.length === 0) {
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        const admin = result.rows[0];
        console.log('üëë Admin found:', admin.email, 'Status:', admin.status);

        if (admin.status !== 'active') {
            return res.status(401).json({ error: '–ê–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' });
        }

        const isValidPassword = await bcrypt.compare(password, admin.password_hash);
        console.log('üîë Password valid:', isValidPassword);

        if (!isValidPassword) {
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        const token = jwt.sign(
            {
                id: admin.id,
                email: admin.email,
                role: admin.role
            },
            process.env.JWT_SECRET,
            { expiresIn: '24h' }
        );

        console.log('‚úÖ Login successful for:', admin.email);

        res.json({
            token,
            user: {
                id: admin.id,
                email: admin.email,
                firstName: admin.first_name,
                lastName: admin.last_name,
                role: admin.role
            }
        });

    } catch (error) {
        console.error('‚ùå Admin login error:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' });
    }
});

// Logout route
router.post('/logout', (req, res) => {
    console.log('üö™ Admin logout');
    // –í —Å—Ç–∞—Çeless JWT —Å–∏—Å—Ç–µ–º–µ logout –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    res.json({ message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥' });
});

// Auth logout route
router.post('/auth/logout', (req, res) => {
    console.log('üîÄ Redirecting /auth/logout to /logout');
    req.url = '/logout';
    router.handle(req, res);
});

// Verify token route - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ /api/admin/verify
router.get('/verify', async (req, res) => {
    console.log('üîç Admin verify attempt');

    try {
        const token = req.header('Authorization')?.replace('Bearer ', '');

        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }

        const decoded = jwt.verify(token, process.env.JWT_SECRET);

        const query = `
      SELECT id, email, first_name, last_name, role, status
      FROM users 
      WHERE id = $1 AND role = 'admin'
    `;

        const result = await pool.query(query, [decoded.id]);

        if (result.rows.length === 0) {
            return res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }

        const admin = result.rows[0];

        if (admin.status !== 'active') {
            return res.status(401).json({ error: '–ê–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' });
        }

        console.log('‚úÖ Token verified for:', admin.email);

        res.json({
            user: {
                id: admin.id,
                email: admin.email,
                firstName: admin.first_name,
                lastName: admin.last_name,
                role: admin.role
            }
        });

    } catch (error) {
        if (error.name === 'TokenExpiredError') {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫' });
        }

        if (error.name === 'JsonWebTokenError') {
            return res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }

        console.error('‚ùå Token verification error:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞' });
    }
});

// Auth verify route (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å)
router.get('/auth/verify', (req, res) => {
    console.log('üîÄ Redirecting /auth/verify to /verify');
    // –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π verify
    req.url = '/verify';
    router.handle(req, res);
});

console.log('‚úÖ Admin routes configured');

module.exports = router;